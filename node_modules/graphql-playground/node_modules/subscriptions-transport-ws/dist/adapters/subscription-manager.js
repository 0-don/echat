"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var is_subscriptions_1 = require("../utils/is-subscriptions");
var rejection_iterable_1 = require("../utils/rejection-iterable");
var iterall_1 = require("iterall");
exports.executeFromSubscriptionManager = function (subscriptionManager) {
    return function (schema, document, rootValue, contextValue, variableValues, operationName) {
        var pullQueue = [];
        var pushQueue = [];
        var listening = true;
        var pushValue = function (event) {
            if (pullQueue.length !== 0) {
                var promise = pullQueue.shift();
                promise.resolve({ value: event, done: false });
            }
            else {
                pushQueue.push(event);
            }
        };
        var pushError = function (error) {
            if (pullQueue.length !== 0) {
                var promise = pullQueue.shift();
                promise.reject(error);
            }
            else {
                pushQueue.push(error);
            }
        };
        var pullValue = function () {
            return new Promise(function (resolve, reject) {
                if (pushQueue.length !== 0) {
                    var valueOrError = pushQueue.shift();
                    if (valueOrError instanceof Error) {
                        reject(valueOrError);
                    }
                    else {
                        resolve({ value: valueOrError, done: false });
                    }
                }
                else {
                    pullQueue.push({ resolve: resolve, reject: reject });
                }
            });
        };
        var emptyQueue = function () {
            if (listening) {
                listening = false;
                pullQueue.forEach(function (p) { return p.resolve({ value: undefined, done: true }); });
                pullQueue.length = 0;
                pushQueue.length = 0;
            }
        };
        if (!is_subscriptions_1.isASubscriptionOperation(document, operationName)) {
            return rejection_iterable_1.createRejectionIterable(new Error('GraphQL Query or Mutation are not supported using SubscriptionManager!'));
        }
        var callbackHandler = function (error, result) {
            if (error) {
                pushError(error);
            }
            else {
                pushValue(result);
            }
        };
        var subIdPromise = subscriptionManager.subscribe({
            query: graphql_1.print(document),
            operationName: operationName,
            callback: callbackHandler,
            variables: variableValues,
            context: contextValue,
        }).catch(function (e) { return pushError(e); });
        return _a = {
                next: function () {
                    return listening ? pullValue() : this.return();
                },
                return: function () {
                    emptyQueue();
                    if (subIdPromise) {
                        subIdPromise.then(function (opId) {
                            if (!isNaN(opId) && opId >= 0) {
                                subscriptionManager.unsubscribe(opId);
                            }
                        });
                    }
                    return Promise.resolve({ value: undefined, done: true });
                },
                throw: function (error) {
                    emptyQueue();
                    return Promise.reject(error);
                }
            },
            _a[iterall_1.$$asyncIterator] = function () {
                return this;
            },
            _a;
        var _a;
    };
};
//# sourceMappingURL=subscription-manager.js.map